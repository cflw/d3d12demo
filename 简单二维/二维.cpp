#include <vector>
#include <cflw图形_dx着色器.h>
#include "二维.h"
namespace 着色器 = cflw::图形::dx着色器;
//==============================================================================
// 二维
//==============================================================================
void C二维::f初始化(三维::C三维 &a三维) {
	m三维 = &a三维;
	auto &v渲染控制 = a三维.fg渲染控制();
	auto &v渲染状态 = a三维.fg渲染状态();
	auto &v缓冲工厂 = a三维.fg缓冲工厂();
	//根签名
	三维::C根签名参数 v根签名;
	v根签名.f添加描述符(三维::C根签名参数::E类型::e常量缓冲视图, 0, 0, 三维::E着色器::e顶点着色器);
	v根签名.f添加描述符(三维::C根签名参数::E类型::e常量缓冲视图, 1, 0, 三维::E着色器::e像素着色器);
	a三维.f创建根签名(m资源.m根签名, v根签名);
	//图形管线
	三维::C顶点格式 v顶点格式;
	v顶点格式.f添加(三维::C顶点格式::e位置, 2);
	着色器::C着色器工厂 v着色器工厂;
	v着色器工厂.f初始化();
	着色器::tp着色器 vs, ps;
	v着色器工厂.f编译顶点着色器(vs, L"着色器.hlsl", L"vs");
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", L"ps");
	三维::S图形管线参数 v图形管线;
	v图形管线.fs根签名(m资源.m根签名.Get());
	v图形管线.fs图元拓扑类型(三维::E图元拓扑类型::e三角形);
	v图形管线.fs顶点着色器(着色器::fc跨度(vs));
	v图形管线.fs像素着色器(着色器::fc跨度(ps));
	v图形管线.fs输入布局(v顶点格式);
	v图形管线.fs光栅化(v渲染状态.m光栅化.m显示隐藏面);
	v图形管线.fs混合(v渲染状态.m混合.m开启透明);
	v图形管线.fs深度模板(v渲染状态.m深度模板.m正常深度r);
	a三维.f创建图形管线(m资源.m图形管线, v图形管线);
	v缓冲工厂.f创建顶点(m资源.m顶点缓冲, nullptr, sizeof(数学::S向量2), sizeof(数学::S向量2) * c最大顶点数);
	v缓冲工厂.f创建索引(m资源.m矩形索引缓冲, ca矩形索引, sizeof(uint16_t), sizeof(ca矩形索引));
	uint16_t va圆形索引[c圆形索引数] = {};
	for (int i = 0; i != c圆形边数 - 2; ++i) {
		const int v序号 = i * 3;
		va圆形索引[v序号] = 0;
		va圆形索引[v序号 + 1] = i + 1;
		va圆形索引[v序号 + 2] = i + 2;
	}
	v缓冲工厂.f创建索引(m资源.m圆形索引缓冲, va圆形索引, sizeof(uint16_t), sizeof(va圆形索引));
	struct S顶点常量 {
		数学::S向量2 m窗口大小;
	} v顶点常量;
	v顶点常量.m窗口大小 = m三维->fg窗口大小();
	v缓冲工厂.f创建常量(m资源.m顶点常量缓冲, &v顶点常量, sizeof(v顶点常量), sizeof(v顶点常量));
	struct S像素常量 {
		数学::S颜色 m颜色;
	}v像素常量;
	v像素常量.m颜色 = 数学::S颜色::c白;
	v缓冲工厂.f创建常量(m资源.m像素常量缓冲, &v像素常量, sizeof(v像素常量), sizeof(v像素常量));
}
void C二维::f准备() {
	auto &v渲染控制 = m三维->fg渲染控制();
	v渲染控制.fs图形管线(m资源.m图形管线.Get());
	v渲染控制.fs根签名(m资源.m根签名.Get());
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表三角形);
	v渲染控制.fs顶点缓冲(*m资源.m顶点缓冲);
	v渲染控制.fs常量缓冲(0, *m资源.m顶点常量缓冲);
	v渲染控制.fs常量缓冲(1, *m资源.m像素常量缓冲);
}
std::shared_ptr<C画图形> C二维::fc画图形() {
	auto &v渲染控制 = m三维->fg渲染控制();
	auto v画图形 = std::make_unique<C画图形>(*this);
	return v画图形;
}
//==============================================================================
// 画图形
//==============================================================================
C画图形::C画图形(C二维 &a二维):
	m三维(a二维.m三维),
	m渲染控制(&a二维.m三维->fg渲染控制()),
	m资源(&a二维.m资源) {
}
//设置
void C画图形::fs线条宽度(float a) {
	m线条宽度 = a;
}
void C画图形::fs颜色(const 数学::S颜色 &a颜色) {
	m颜色 = a颜色;
	三维::C自动映射::f映射并复制(m资源->m顶点缓冲->m资源.Get(), &m颜色, sizeof(m颜色));
}
void C画图形::fs透明度(float a) {
	m颜色.a = a;
}
//描线
void C画图形::f绘制点(const 数学::S向量2 &a点) {
	//顶点
}
void C画图形::f绘制线条(const 数学::S线段2 &a线段) {
	m渲染控制->fs图元拓扑(三维::E图元拓扑::e连续线段);

}
void C画图形::f绘制矩形(const 数学::S矩形 &) {

}
void C画图形::f绘制旋转矩形(const 数学::S旋转矩形 &a矩形) {

}
void C画图形::f绘制圆形(const 数学::S圆形 &) {

}
void C画图形::f绘制椭圆(const 数学::S椭圆 &) {

}
void C画图形::f绘制圆角矩形(const 数学::S圆角矩形 &) {

}
//填充
void C画图形::f填充矩形(const 数学::S矩形 &a矩形) {
	const 数学::S向量2 va顶点[] = {
		a矩形.fg点(-1, 1),
		a矩形.fg点(1, 1),
		a矩形.fg点(-1, -1),
		a矩形.fg点(1, -1),
	};
	三维::C自动映射::f映射并复制(m资源->m顶点缓冲->m资源.Get(), va顶点, sizeof(va顶点));
	m渲染控制->fs索引缓冲(*m资源->m矩形索引缓冲);
	m渲染控制->fs图元拓扑(三维::E图元拓扑::e列表三角形);
	m渲染控制->f绘制索引(C二维::c矩形索引数);
}
void C画图形::f填充旋转矩形(const 数学::S旋转矩形 &a矩形) {
	const 数学::S向量2 va顶点[] = {
		a矩形.fg点(-1, 1),
		a矩形.fg点(1, 1),
		a矩形.fg点(-1, -1),
		a矩形.fg点(1, -1),
	};
	三维::C自动映射::f映射并复制(m资源->m顶点缓冲->m资源.Get(), va顶点, sizeof(va顶点));
	m渲染控制->fs索引缓冲(*m资源->m矩形索引缓冲);
	m渲染控制->fs图元拓扑(三维::E图元拓扑::e列表三角形);
	m渲染控制->f绘制索引(C二维::c矩形索引数);
}
void C画图形::f填充圆形(const 数学::S圆形 &a圆形) {
	数学::S向量2 va顶点[C二维::c圆形顶点数];
	for (int i = 0; i != C二维::c圆形顶点数; ++i) {
		const float v方向 = (float)i / (float)C二维::c圆形顶点数 * 数学::c二π<float>;
		va顶点[i] = a圆形.fg点r(v方向);
	}
	三维::C自动映射::f映射并复制(m资源->m顶点缓冲->m资源.Get(), va顶点, sizeof(va顶点));
	m渲染控制->fs索引缓冲(*m资源->m圆形索引缓冲);
	m渲染控制->fs图元拓扑(三维::E图元拓扑::e列表三角形);
	m渲染控制->f绘制索引(C二维::c圆形索引数);
}
void C画图形::f填充椭圆(const 数学::S椭圆 &) {

}
void C画图形::f填充圆角矩形(const 数学::S圆角矩形 &) {

}
void C画图形::f填充三角形_() {
	const 数学::S向量2 v窗口大小 = m三维->fg窗口大小();
	const 数学::S向量2 va顶点[] = {
		数学::S向量2(0 * v窗口大小.x, 0.5f * v窗口大小.y),
		数学::S向量2(0.5f * v窗口大小.x, -0.5f * v窗口大小.y),
		数学::S向量2(-0.5f * v窗口大小.x, -0.5f * v窗口大小.y),
	};
	三维::C自动映射::f映射并复制(m资源->m顶点缓冲->m资源.Get(), va顶点, sizeof(va顶点));
	m渲染控制->fs索引缓冲(*m资源->m圆形索引缓冲);
	m渲染控制->fs图元拓扑(三维::E图元拓扑::e列表三角形);
	m渲染控制->f绘制索引(3);
}
