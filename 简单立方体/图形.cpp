#include <cflw图形_dx着色器.h>
#include "图形.h"
#include "常量.h"
namespace 着色器 = cflw::图形::dx着色器;
void C图形::f初始化(HWND a窗口) {
	m三维.f初始化(a窗口);
	m窗口大小 = m三维.fg窗口大小();
	三维::C渲染控制 &v渲染控制 = m三维.fg渲染控制();
	三维::C渲染状态 &v渲染状态 = m三维.fg渲染状态();
	三维::C缓冲工厂 &v缓冲工厂 = m三维.fg缓冲工厂();
	着色器::C着色器工厂 v着色器工厂;
	v着色器工厂.f初始化();
	v渲染控制.f重置命令();
	//根签名
	三维::C根签名参数 v根签名;
	v根签名.f添加描述符(三维::C根签名参数::E类型::e常量缓冲视图, 0, 0, 三维::E着色器::e全部);
	m三维.f创建根签名(m根签名, v根签名);
	v渲染控制.fs根签名(m根签名.Get());
	//着色器
	着色器::tp着色器 vs, ps;
	v着色器工厂.f编译顶点着色器(vs, L"着色器.hlsl", L"vs");
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", L"ps");
	三维::C顶点格式 v顶点格式;
	v顶点格式.f添加(三维::C顶点格式::e位置, 3);
	v顶点格式.f添加(三维::C顶点格式::e颜色, 4);
	//图形管线
	三维::S图形管线参数 v图形管线;
	v图形管线.fs根签名(m根签名.Get());
	v图形管线.fs图元拓扑类型(三维::E图元拓扑类型::e三角形);
	v图形管线.fs顶点着色器(着色器::fc跨度(vs));
	v图形管线.fs像素着色器(着色器::fc跨度(ps));
	v图形管线.fs输入布局(v顶点格式);
	v图形管线.fs光栅化(v渲染状态.m光栅化.m默认);
	v图形管线.fs混合(v渲染状态.m混合.m开启透明);
	v图形管线.fs深度模板(v渲染状态.m深度模板.m正常深度r);
	m三维.f创建图形管线(m图形管线, v图形管线);
	v渲染控制.fs图形管线(m图形管线.Get());
	//顶点
	struct S顶点 {
		数学::S向量3 m坐标;
		数学::S颜色 m颜色;
	};
	const S顶点 va顶点[] = {
		{{-1, -1, -1}, {1, 0, 0, 1}},	//0
		{{-1, -1, 1}, {0, 1, 0, 1}},	//1
		{{-1, 1, -1}, {0, 0, 1, 1}},	//2
		{{-1, 1, 1}, {1, 1, 0, 1}},		//3
		{{1, -1, -1}, {1, 1, 0, 1}},	//4
		{{1, -1, 1}, {0, 0, 1, 1}},		//5
		{{1, 1, -1}, {0, 1, 0, 1}},		//6
		{{1, 1, 1}, {1, 0, 0, 1}}		//7
	};
	v缓冲工厂.f创建顶点(m顶点, va顶点, sizeof(S顶点), sizeof(va顶点));
	//索引
	const uint16_t va索引[] = {
		2, 1, 0,
		2, 3, 1,
		4, 5, 6,
		5, 7, 6,
		0, 1, 4,
		1, 5, 4,
		6, 3, 2,
		6, 7, 3,
		4, 2, 0,
		4, 6, 2,
		1, 3, 5,
		3, 7, 5
	};
	v缓冲工厂.f创建索引(m索引, va索引, sizeof(uint16_t), sizeof(va索引));
	//常量
	m总矩阵.m世界 = m世界.ft矩阵4();
	数学::S相机 v相机;
	v相机.m坐标 = {0, 0, 4};
	v相机.m目标 = {0, 0, 0};
	v相机.m上方 = {0, 1, 0};
	m总矩阵.m视图 = v相机.ft矩阵4r();
	数学::S投影 v投影;
	v投影 = 数学::S投影(m窗口大小.x, m窗口大小.y);
	m总矩阵.m投影 = v投影.ft矩阵4r();
	v缓冲工厂.f创建常量(m常量, &m总矩阵, sizeof(m总矩阵), sizeof(m总矩阵));
	//结束
	v渲染控制.f执行命令并等待();
}
void C图形::f销毁() {
	m三维.f销毁();
}
void C图形::f计算() {
	m世界.m旋转.x += c帧秒 * 0.9f;
	m世界.m旋转.y += c帧秒 * 0.5f;
	m世界.m旋转.z += c帧秒 * 0.2f;
}
void C图形::f更新() {
	m总矩阵.m世界 = m世界.ft矩阵4();
	三维::C自动映射::f映射并复制(m常量->m资源.Get(), &m总矩阵, sizeof(m总矩阵));
}
void C图形::f显示() {
	三维::C渲染控制 &v渲染控制 = m三维.fg渲染控制();
	v渲染控制.f重置命令();
	v渲染控制.f开始();
	v渲染控制.f清屏();
	v渲染控制.fs根签名(m根签名.Get());
	v渲染控制.fs图形管线(m图形管线.Get());
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表三角形);
	v渲染控制.fs顶点缓冲(*m顶点);
	v渲染控制.fs索引缓冲(*m索引);
	v渲染控制.fs常量缓冲(0, *m常量);
	v渲染控制.f绘制索引(36);
	v渲染控制.f结束();
	v渲染控制.f执行命令并显示();
}